import { StableHordeQueuedRequest } from '../models/StableHordeQueuedRequest';
import { StableHordeRequestStatus } from '../models/StableHordeRequestStatus';
import { StableHordeGenerations } from '../models/StableHordeGenerations';
import { StableHordeAsyncRequestHandler } from './asyncRequestHandler';
/**
 * Contains the options for a Stable Horde client.
 *
 * @typedef {Object} StableHordeClientOptions
 * @property {string?} [baseUrl] The base URL of the Stable Horde API to use.
 * @property {string} [apiKey] The API key to use for requests.
 */
export interface StableHordeClientOptions {
    baseUrl?: string;
    apiKey: string;
}
/**
 * Request parameters for a single Stable Diffusion image generation.
 *
 * @typedef {Object} StableHordeRequestParameters
 * @property {number} [n] The number of images to generate. Defaults to 1.
 * @property {number} [width] The width of the images to generate. Defaults to
 *                            512.
 * @property {number} [height] The height of the images to generate. Defaults to
 *                             512.
 * @property {number} [cfgScale] The config scale (C-value) of the generated
 *                               images. Defaults to 7.5.
 * @property {number} [steps] The number of steps. Defaults to 24.
 */
export interface StableHordeRequestParameters {
    n: number;
    width: number;
    height: number;
    cfgScale: number;
    steps: number;
}
/**
 * @api public
 * @class Client
 * @classdesc An API client for Stable Horde.
 */
export declare class Client {
    private static ASYNC_GENERATE_PATH;
    private static ASYNC_REQUEST_CHECK_PATH;
    private static ASYNC_REQUEST_STATUS_PATH;
    private baseUrl;
    private apiKey;
    /**
     * @constructor
     * @param {StableHordeClientOptions} [options] The options for the client.
     */
    constructor({ baseUrl, apiKey }: StableHordeClientOptions);
    /**
     * Creates an asynchronous request handler for a single request. This request
     * handler will emit events as the request progresses, given a specific
     * polling interval.
     *
     * @param {number} [pollingInterval] The polling interval in milliseconds.
     *                                   Defaults to 5000.
     * @returns {StableHordeAsyncRequestHandler} The request handler.
     */
    newRequestHandler(pollingInterval?: number): StableHordeAsyncRequestHandler;
    /**
     * Enqueues an image generation request.
     *
     * @param {string} [prompt] The prompt to use for the generation.
     * @param {StableHordeRequestParameters} [params] The parameters for the
     *                                                generation.
     * @returns {Promise<StableHordeQueuedRequest>} The queued request.
     */
    generateAsync(prompt: string, params?: StableHordeRequestParameters): Promise<StableHordeQueuedRequest>;
    /**
     * Checks the status of a given request.
     *
     * @param {StableHordeQueuedRequest} [request] The request to check.
     * @returns {Promise<StableHordeRequestStatus>} Request status object.
     */
    check(request: StableHordeQueuedRequest): Promise<StableHordeRequestStatus>;
    /**
     * Returns the generations of a given request. You may only send this request
     * twice every minute.
     *
     * @param request
     * @returns
     */
    generations(request: StableHordeQueuedRequest): Promise<StableHordeGenerations>;
    private normalizeParameters;
    private makeUrl;
    private makeAsyncGenerateUrl;
    private makeAsyncRequestCheckUrl;
    private makeAsyncRequestStatusUrl;
}
