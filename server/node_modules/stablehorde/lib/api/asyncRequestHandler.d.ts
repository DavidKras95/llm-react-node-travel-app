import { StableHordeGenerations } from '../models/StableHordeGenerations';
import { StableHordeQueuedRequest } from '../models/StableHordeQueuedRequest';
import { StableHordeRequestStatus } from '../models/StableHordeRequestStatus';
import { Client, StableHordeRequestParameters } from './client';
export declare class StableHordeAsyncRequestHandler {
    private client;
    private pollingInterval;
    private handlers;
    constructor(client: Client, pollingInterval?: number);
    /**
     * Registers an event handler for the `created` event. This event will run
     * when the request is created on Stable Horde's API.
     *
     * @param {'created'} [event] Created event.
     * @param {Function} [handler] The callback. Receives a {StableHordeQueuedRequest}
     * as its only argument.
     */
    on(event: 'created', handler: (data: StableHordeQueuedRequest) => void): void;
    /**
     * Registers an event handler for the `statusPolled` event. This event will
     * run every time the status of the request is polled.
     *
     * @param {'statusPolled'} [event] Status polled event.
     * @param {Function} [handler] The callback. Receives a {StableHordeRequestStatus}
     * as its only argument.
     */
    on(event: 'statusPolled', handler: (data: StableHordeRequestStatus) => void): void;
    /**
     * Registers an event handler for the `finished` event. This event will run
     * when the image generation has finished.
     *
     * @param {'finished'} [event] Finished event.
     * @param {Function} [handler] The callback. Receives a {StableHordeGenerations}
     * object as its only argument.
     */
    on(event: 'finished', handler: (data: StableHordeGenerations) => void): void;
    /**
     * Registers an event for the `error` event. This event will run when an
     * error occurs.
     *
     * @param {'error'} [event] Error event.
     * @param {Function} [handler] The callback. Receives an error as its only
     * argument.
     */
    on(event: 'error', handler: (data: any) => void): void;
    /**
     * Unregisters an event handler.
     *
     * @param {string} [event] The event to unregister.
     */
    off(event: string): void;
    private emit;
    /**
     * Creates a new image generation request emitting the `create` event. Then it
     * will poll the status of the request until it is done, emitting a `statusPolled`
     * event on every iteration. When the request is done, it will emit a `finished`
     * event.
     *
     * @param {string} [prompt] The prompt to use for the image generation.
     * @param {StableHordeRequestParameters} [params] The request parameters.
     * @returns {Promise<StableHorderAsyncRequestHandler>} A reference to itself.
     */
    generate(prompt: string, params: StableHordeRequestParameters): Promise<StableHordeAsyncRequestHandler>;
    private poll;
}
