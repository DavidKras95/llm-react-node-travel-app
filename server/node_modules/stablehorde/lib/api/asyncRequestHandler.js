"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StableHordeAsyncRequestHandler = void 0;
class StableHordeAsyncRequestHandler {
    constructor(client, pollingInterval = 5000) {
        this.client = client;
        this.handlers = new Map();
        this.pollingInterval = pollingInterval;
    }
    /**
     * Registers an event handler.
     *
     * @param {string} [event] The event to register.
     * @param {Function} [handler] The callback.
     */
    on(event, handler) {
        this.handlers.set(event, handler);
    }
    /**
     * Unregisters an event handler.
     *
     * @param {string} [event] The event to unregister.
     */
    off(event) {
        this.handlers.delete(event);
    }
    emit(event, data) {
        const handler = this.handlers.get(event);
        if (handler) {
            handler(data);
        }
    }
    /**
     * Creates a new image generation request emitting the `create` event. Then it
     * will poll the status of the request until it is done, emitting a `statusPolled`
     * event on every iteration. When the request is done, it will emit a `finished`
     * event.
     *
     * @param {string} [prompt] The prompt to use for the image generation.
     * @param {StableHordeRequestParameters} [params] The request parameters.
     * @returns {Promise<StableHorderAsyncRequestHandler>} A reference to itself.
     */
    async generate(prompt, params) {
        try {
            const request = await this.client.generateAsync(prompt, params);
            this.emit('created', request);
            this.poll(request);
        }
        catch (err) {
            this.emit('error', err);
        }
        return this;
    }
    async poll(request) {
        try {
            const status = await this.client.check(request);
            this.emit('statusPolled', status);
            if (status.done) {
                const generations = await this.client.generations(request);
                this.emit('finished', generations);
            }
            else {
                setTimeout(() => this.poll(request), this.pollingInterval);
            }
        }
        catch (err) {
            this.emit('error', err);
        }
    }
}
exports.StableHordeAsyncRequestHandler = StableHordeAsyncRequestHandler;
