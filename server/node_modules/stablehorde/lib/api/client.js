"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const axios_1 = __importDefault(require("axios"));
const StableHordeQueuedRequest_1 = require("../models/StableHordeQueuedRequest");
const StableHordeRequestStatus_1 = require("../models/StableHordeRequestStatus");
const StableHordeGenerations_1 = require("../models/StableHordeGenerations");
const asyncRequestHandler_1 = require("./asyncRequestHandler");
const DEFAULT_PARAMS = {
    n: 1,
    width: 512,
    height: 512,
    cfgScale: 7.5,
    steps: 24,
};
/**
 * @api public
 * @class Client
 * @classdesc An API client for Stable Horde.
 */
class Client {
    /**
     * @constructor
     * @param {StableHordeClientOptions} [options] The options for the client.
     */
    constructor({ baseUrl, apiKey }) {
        this.baseUrl = baseUrl !== null && baseUrl !== void 0 ? baseUrl : 'https://stablehorde.net';
        this.apiKey = apiKey;
    }
    /**
     * Creates an asynchronous request handler for a single request. This request
     * handler will emit events as the request progresses, given a specific
     * polling interval.
     *
     * @param {number} [pollingInterval] The polling interval in milliseconds.
     *                                   Defaults to 5000.
     * @returns {StableHordeAsyncRequestHandler} The request handler.
     */
    newRequestHandler(pollingInterval = 5000) {
        return new asyncRequestHandler_1.StableHordeAsyncRequestHandler(this, pollingInterval);
    }
    /**
     * Enqueues an image generation request.
     *
     * @param {string} [prompt] The prompt to use for the generation.
     * @param {StableHordeRequestParameters} [params] The parameters for the
     *                                                generation.
     * @returns {Promise<StableHordeQueuedRequest>} The queued request.
     */
    async generateAsync(prompt, params = DEFAULT_PARAMS) {
        const url = this.makeAsyncGenerateUrl();
        const response = await axios_1.default.post(url, {
            prompt,
            params: this.normalizeParameters(params),
        }, {
            headers: {
                apikey: this.apiKey,
            },
        });
        if (response.status !== 202) {
            throw new Error(`Unexpected status code: ${response.status}`);
        }
        return StableHordeQueuedRequest_1.StableHordeQueuedRequest.fromJSON(response.data);
    }
    /**
     * Checks the status of a given request.
     *
     * @param {StableHordeQueuedRequest} [request] The request to check.
     * @returns {Promise<StableHordeRequestStatus>} Request status object.
     */
    async check(request) {
        const url = this.makeAsyncRequestCheckUrl(request.id);
        const response = await axios_1.default.get(url);
        return StableHordeRequestStatus_1.StableHordeRequestStatus.fromJSON(response.data);
    }
    /**
     * Returns the generations of a given request. You may only send this request
     * twice every minute.
     *
     * @param request
     * @returns
     */
    async generations(request) {
        const url = this.makeAsyncRequestStatusUrl(request.id);
        const response = await axios_1.default.get(url);
        return StableHordeGenerations_1.StableHordeGenerations.fromJSON(response.data);
    }
    normalizeParameters(params) {
        const finalParams = Object.assign(Object.assign({}, DEFAULT_PARAMS), params);
        return {
            n: finalParams.n,
            width: finalParams.width,
            height: finalParams.height,
            cfg_scale: finalParams.cfgScale,
            steps: finalParams.steps,
        };
    }
    makeUrl(url) {
        return this.baseUrl + url;
    }
    makeAsyncGenerateUrl() {
        return this.makeUrl(Client.ASYNC_GENERATE_PATH);
    }
    makeAsyncRequestCheckUrl(requestID) {
        return this.makeUrl(Client.ASYNC_REQUEST_CHECK_PATH.replace(':requestID', requestID));
    }
    makeAsyncRequestStatusUrl(requestID) {
        return this.makeUrl(Client.ASYNC_REQUEST_STATUS_PATH.replace(':requestID', requestID));
    }
}
exports.Client = Client;
Client.ASYNC_GENERATE_PATH = '/api/v2/generate/async';
Client.ASYNC_REQUEST_CHECK_PATH = '/api/v2/generate/check/:requestID';
Client.ASYNC_REQUEST_STATUS_PATH = '/api/v2/generate/status/:requestID';
